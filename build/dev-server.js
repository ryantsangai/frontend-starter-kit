const path = require('path')
const webpack = require('webpack')
const MFS = require('memory-fs')
const clientConfig = require('./webpack.client.config')
const serverConfig = require('./webpack.server.config')
const express = require('express')
const Render = require('./render')
let renderer, clientManifest, bundle

const app = express()


const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
  } catch (e) {}
}


// modify client config to work with hot middleware
clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]
clientConfig.output.filename = '[name].js'
clientConfig.plugins.push(
  new webpack.HotModuleReplacementPlugin(),
  new webpack.NoEmitOnErrorsPlugin()
)

// dev middleware
const clientCompiler = webpack(clientConfig)
const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
  publicPath: clientConfig.output.publicPath,
  hot: true,
  noInfo: true
})

app.use(devMiddleware)
// hot middleware
app.use(require('webpack-hot-middleware')(clientCompiler, {
  heartbeat: 5000,
}))

clientCompiler.plugin('done', stats => {
  stats = stats.toJson()
  stats.errors.forEach(err => console.error(err))
  stats.warnings.forEach(err => console.warn(err))
  if (stats.errors.length) return

  clientManifest = JSON.parse(readFile(
    devMiddleware.fileSystem,
    'vue-ssr-client-manifest.json'
  ))

  if (bundle) {
    renderer = new Render(bundle, { clientManifest })
  }
})


// watch and update server renderer
const serverCompiler = webpack(serverConfig)
const mfs = new MFS()
serverCompiler.outputFileSystem = mfs
serverCompiler.watch({}, (err, stats) => {
  if (err) throw err
  stats = stats.toJson()
  if (stats.errors.length) return

  // read bundle generated by vue-ssr-webpack-plugin
  bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
  if (clientManifest) {
    renderer = new Render(bundle, { clientManifest })
  }
})

app.use('/static', express.static(path.resolve(__dirname), {
  maxAge: 0,
}))

app.get('*', (req, res) => {
  console.log('url need render', req.url);
  return renderer.get(req.url)
    .then(html => {
      // console.log(html);
      res.send(html)
    })
    // .catch(error => console.error(error))
})


const port = process.env.PORT || 8080

app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})


